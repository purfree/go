package main

func main() {
	//var size_to_class128 = [10000]uint8{31, 32, 33, 34, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 40, 40, 40, 41, 42, 42, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 47, 47, 47, 48, 48, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66}
	//var class_to_size = [10000]uint16{0, 8, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 288, 320, 352, 384, 416, 448, 480, 512, 576, 640, 704, 768, 896, 1024, 1152, 1280, 1408, 1536, 1792, 2048, 2304, 2688, 3072, 3200, 3456, 4096, 4864, 5376, 6144, 6528, 6784, 6912, 8192, 9472, 9728, 10240, 10880, 12288, 13568, 14336, 16384, 18432, 19072, 20480, 21760, 24576, 27264, 28672, 32768}
	//a := (1 << (4 * 8)) - 1
	//fmt.Println(a * a)
	//fmt.Println(4294967295 * 4294967295)
	//fmt.Println(^uintptr(0))
	//fmt.Println(1<<(4*8) - 1)
	//fmt.Println(int(math.Pow(2, 32)))
	//fmt.Println(415 | 144)
	//fmt.Printf("%b\n", 415)
	//fmt.Printf("%b\n", 144)

	m := make(map[*int]int, 415)
	//m2 := make(map[string]int)
	//fmt.Println(m)
	//fmt.Println(13 * (1 << 6) / 2)
	//fmt.Println((9792 - 1024 + 128 - 1) / 128)
	//fmt.Println(size_to_class128[69])
	//fmt.Println(class_to_size[53])
	//fmt.Println(10240 / 144)
	//m = m2
	m[intP(1)] = 1
	//m["b"] = 2
	//m["c"] = 3
	//for k, v := range m {
	//	fmt.Println(k, v)
	//}
	//a := m["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhhh"]
	//fmt.Println(a)
	//m := make(map[string]*int)
	//m["a"] = intP(1)
	//m["b"] = intP(2)
	//
	//var a []*int
	//for _, v := range m {
	//	a = append(a, v)
	//	fmt.Println(*v)
	//}
	//fmt.Println(*a[0], *a[1])
	//for i := 0; i < 100; i++ {
	//	m[string(i+97)] = i
	//}
	//fmt.Println(string(97))
	//fmt.Println(2 + 2 ^ (4 - 1))
	//fmt.Println(1001 & 1111)
	//fmt.Printf("%b\n", 1001&1111)

	//fmt.Println(string(97))

	//unsafeMap()
}

func intP(i int) *int {
	return &i
}
